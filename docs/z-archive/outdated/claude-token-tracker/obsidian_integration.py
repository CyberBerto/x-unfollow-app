#!/usr/bin/env python3
"""Integration between estimation tracker and Obsidian workflow."""

import json
import os
from datetime import datetime
from pathlib import Path

class ObsidianEstimationIntegration:
    def __init__(self):
        self.tracker_folder = Path("/Users/bob/Documents/Duh Vault/X Unfollow App/07-TOOLS/claude-token-tracker")
        self.obsidian_folder = Path("/Users/bob/Documents/Duh Vault/X Unfollow App")
        self.estimation_log = self.tracker_folder / "estimation_log.json"
        
    def export_to_obsidian_format(self):
        """Export estimation data to Obsidian-compatible format."""
        
        if not self.estimation_log.exists():
            return "No estimation data to export."
        
        with open(self.estimation_log, 'r') as f:
            log_data = json.load(f)
        
        if not log_data:
            return "No estimation exchanges found."
        
        # Generate session summary
        total_user = sum(ex.get("estimated_user_tokens", 0) for ex in log_data)
        total_workflow = sum(ex.get("estimated_workflow_tokens", 0) for ex in log_data)
        total_response = sum(ex.get("estimated_response_tokens", 0) for ex in log_data)
        total_cost = sum(ex.get("estimated_cost", 0) for ex in log_data)
        
        # Create export content
        export_content = f"""# Estimation Session Export - {datetime.now().strftime('%Y-%m-%d %H:%M')}

## Session Summary
- **Exchanges**: {len(log_data)}
- **Estimated User Tokens**: {total_user}
- **Estimated Workflow Tokens**: {total_workflow}
- **Estimated Response Tokens**: {total_response}
- **Total Estimated Tokens**: {total_user + total_workflow + total_response}
- **Estimated Cost**: ${total_cost:.4f}
- **Method**: Content-based estimation

‚ö†Ô∏è **Important**: Estimates are likely 2-5x UNDER actual usage

## Token Usage Tracker Entry

| Date | Task/Decision | Tools Used | Estimated Tokens | Workflow Tokens | Response Tokens | Estimated Cost | Complexity |
|------|---------------|------------|------------------|-----------------|-----------------|----------------|------------|
"""
        
        # Add individual exchanges
        for exchange in log_data:
            date = exchange.get("timestamp", "")[:10]  # Extract date
            task = exchange.get("user_message_preview", "Session work")[:50]
            tools = f"{exchange.get('workflow_steps_count', 0)} steps"
            user_tokens = exchange.get("estimated_user_tokens", 0)
            workflow_tokens = exchange.get("estimated_workflow_tokens", 0)
            response_tokens = exchange.get("estimated_response_tokens", 0)
            cost = exchange.get("estimated_cost", 0)
            complexity = exchange.get("complexity", "medium")
            
            export_content += f"| {date} | {task} | {tools} | {user_tokens} | {workflow_tokens} | {response_tokens} | ${cost:.4f} | {complexity} |\n"
        
        # Add recommendations
        export_content += f"""

## Recommendations for Token Usage Tracker Update

### Suggested Entry:
```
| {datetime.now().strftime('%Y-%m-%d')} | Session work with estimation tracking | Estimation system | {total_user + total_workflow + total_response} | Realistic: {(total_user + total_workflow + total_response) * 3} | Content-based estimation (apply 2-5x multiplier) |
```

### Workflow Analysis:
- **User messages**: {total_user} tokens ({total_user / len(log_data):.1f} avg per exchange)
- **Workflow processing**: {total_workflow} tokens ({total_workflow / len(log_data):.1f} avg per exchange)
- **Responses**: {total_response} tokens ({total_response / len(log_data):.1f} avg per exchange)

### Session Insights:
- **Average complexity**: {sum(ex.get("complexity_multiplier", 1.3) for ex in log_data) / len(log_data):.1f}x
- **Most expensive operations**: File operations and analysis work
- **Efficiency**: {len(log_data)} exchanges in session

---

*Generated by Claude Estimation Tracker - {datetime.now().isoformat()}*
"""
        
        # Save export file
        export_filename = f"Estimation-Export-{datetime.now().strftime('%Y%m%d_%H%M')}.md"
        export_path = self.tracker_folder / export_filename
        
        with open(export_path, 'w') as f:
            f.write(export_content)
        
        return export_path
    
    def update_token_usage_tracker(self):
        """Generate entry for Token Usage Tracker."""
        
        if not self.estimation_log.exists():
            return "No estimation data available."
        
        with open(self.estimation_log, 'r') as f:
            log_data = json.load(f)
        
        if not log_data:
            return "No exchanges to process."
        
        # Calculate totals
        total_estimated = sum(
            ex.get("estimated_user_tokens", 0) + 
            ex.get("estimated_workflow_tokens", 0) + 
            ex.get("estimated_response_tokens", 0) 
            for ex in log_data
        )
        
        realistic_estimate = total_estimated * 3  # Conservative 3x multiplier
        total_cost = sum(ex.get("estimated_cost", 0) for ex in log_data)
        avg_complexity = sum(ex.get("complexity_multiplier", 1.3) for ex in log_data) / len(log_data)
        
        # Generate entry
        entry = {
            "date": datetime.now().strftime('%Y-%m-%d'),
            "task": f"Phase 3.9 development work ({len(log_data)} exchanges)",
            "tools": "Estimation tracking system",
            "estimated_tokens": total_estimated,
            "realistic_tokens": realistic_estimate,
            "outcome": f"Workflow analysis with {avg_complexity:.1f}x avg complexity",
            "complexity_factors": "Content-based estimation, workflow tracking, batch analysis",
            "estimated_cost": total_cost,
            "realistic_cost": total_cost * 3
        }
        
        return entry
    
    def create_organizational_structure(self):
        """Create organized folder structure for estimation storage."""
        
        # Create estimation storage folders
        estimation_base = self.obsidian_folder / "07-TOOLS" / "estimation-data"
        folders_to_create = [
            estimation_base,
            estimation_base / "session-exports",
            estimation_base / "batch-summaries", 
            estimation_base / "workflow-analysis"
        ]
        
        for folder in folders_to_create:
            folder.mkdir(exist_ok=True)
        
        # Create index file
        index_content = """# Estimation Tracking System

*Organized storage for token usage estimation data*

## Folder Structure

### üìä session-exports/
Complete session exports with detailed breakdown:
- Individual exchange analysis
- Workflow step tracking
- Cost calculations with multipliers
- Obsidian table format ready for Token Usage Tracker

### üìã batch-summaries/
Regular batch summaries during development:
- 3-5 exchange groupings
- Progress tracking
- Efficiency analysis
- Trend identification

### üîç workflow-analysis/
Deep analysis of development patterns:
- Tool usage patterns
- Complexity analysis
- Efficiency trends
- Cost optimization insights

## Integration with Main Tracking System

### Token Usage Tracker Updates
1. **Run session** with estimation tracking
2. **Export data** using obsidian_integration.py
3. **Copy table entries** to 01-TRACKING/Token-Usage-Tracker.md
4. **Apply multipliers** (2-5x) for realistic estimates

### Cross-Reference with Other Systems
- **Progress Timeline**: Session completion markers
- **Session Dashboard**: Complexity estimates for planning
- **Development Rules**: Efficiency standards and patterns

## Usage Workflow

### Start Session
```bash
python auto_tracker.py
```

### During Development
- Automatic estimation tracking
- Batch summaries every 3-5 exchanges
- Real-time complexity assessment

### End Session
```bash
python auto_tracker.py --end
python obsidian_integration.py  # Export to Obsidian
```

## Estimation Accuracy

‚ö†Ô∏è **Important Disclaimers:**
- Estimates are 2-5x UNDER actual usage
- Useful for relative comparison and trends
- Apply multipliers for budget planning
- Cannot capture internal AI reasoning costs

---

*Part of the comprehensive Claude Code development tracking system*
"""
        
        index_path = estimation_base / "README.md"
        with open(index_path, 'w') as f:
            f.write(index_content)
        
        return {
            "created_folders": [str(f) for f in folders_to_create],
            "index_file": str(index_path)
        }

# CLI interface
def main():
    integration = ObsidianEstimationIntegration()
    
    print("üìä OBSIDIAN ESTIMATION INTEGRATION")
    print("1. Export session data to Obsidian format")
    print("2. Generate Token Usage Tracker entry") 
    print("3. Create organizational structure")
    print("4. All of the above")
    
    choice = input("Select option (1-4): ")
    
    if choice == "1":
        export_path = integration.export_to_obsidian_format()
        print(f"‚úÖ Exported to: {export_path}")
        
    elif choice == "2":
        entry = integration.update_token_usage_tracker()
        print("‚úÖ Token Usage Tracker entry:")
        print(json.dumps(entry, indent=2))
        
    elif choice == "3":
        result = integration.create_organizational_structure()
        print("‚úÖ Organizational structure created:")
        for folder in result["created_folders"]:
            print(f"  üìÅ {folder}")
        print(f"  üìÑ {result['index_file']}")
        
    elif choice == "4":
        # Do everything
        structure = integration.create_organizational_structure()
        export_path = integration.export_to_obsidian_format()
        entry = integration.update_token_usage_tracker()
        
        print("‚úÖ Complete integration setup:")
        print(f"  üìÅ Folders created: {len(structure['created_folders'])}")
        print(f"  üìÑ Export created: {export_path}")
        print(f"  üìä Tracker entry ready")
        
    else:
        print("Invalid option")

if __name__ == "__main__":
    main()