<!-- X Unfollow App Session Management Prompt -->
<prompt version="1.0" type="session-management" project="x-unfollow-app">
  <context>
    <project>X Unfollow App - Flask Web Application for X API Batch Unfollowing</project>
    <technology_stack>Python Flask, JavaScript, Bootstrap, X API v2 OAuth 2.0</technology_stack>
    <current_state>Layer 1 complete (71% complexity reduction), Layer 2 ready</current_state>
    <development_methodology>Systematic 5-layer enhancement approach</development_methodology>
    <session_focus>Focused development sessions with complete documentation</session_focus>
  </context>
  
  <project_specific_context>
    <application_purpose>
      <core_function>Batch unfollowing X accounts via CSV upload with rate limit compliance</core_function>
      <user_workflow>Upload CSV → Select users → Start batch → Monitor progress → Complete</user_workflow>
      <technical_approach>Flask backend + JavaScript frontend + X API v2 integration</technical_approach>
    </application_purpose>
    
    <current_architecture>
      <backend>23 Python functions in app.py, api.py, config.py</backend>
      <frontend>JavaScript application with Bootstrap UI</frontend>
      <authentication>OAuth 2.0 PKCE flow with secure token storage</authentication>
      <rate_limiting>15-minute intervals, persistent tracking, queue management</rate_limiting>
      <data_flow>CSV → User selection → Batch queue → Sequential processing → Results</data_flow>
    </current_architecture>
    
    <layer_progression>
      <layer_1_complete>Clean basic batch flow with 71% complexity reduction</layer_1_complete>
      <layer_2_ready>Error classification for smart wait times (30-50% time savings)</layer_2_ready>
      <layer_3_planned>Network retry logic with exponential backoff</layer_3_planned>
      <layer_4_planned>Rate limit batch management with pause/resume</layer_4_planned>
      <layer_5_planned>Authentication management with auto-refresh</layer_5_planned>
    </layer_progression>
  </project_specific_context>
  
  <session_management_protocols>
    <session_start_go>
      <context_loading>
        <priority_files>
          <quick_context>.claude/context/quick-context.md</quick_context>
          <session_state>.claude/context/current-session.json</session_state>
          <layer_status>.claude/context/layer-status.json</layer_status>
          <current_sprint>docs/active/Next-Session-Immediate-Start.md</current_sprint>
        </priority_files>
        
        <project_verification>
          <flask_app>Verify app.py is accessible and imports work</flask_app>
          <virtual_env>Check Python virtual environment activation</virtual_env>
          <dependencies>Confirm Flask, requests, python-dotenv availability</dependencies>
          <api_config>Verify X API credentials configuration</api_config>
        </project_verification>
        
        <development_readiness>
          <current_layer>Confirm Layer 2 error classification focus</current_layer>
          <target_location>app.py line ~450 in slow_batch_worker()</target_location>
          <foundation_status>Verify Layer 1 is stable and complete</foundation_status>
          <implementation_plan>Review error classification approach</implementation_plan>
        </development_readiness>
      </context_loading>
      
      <environment_check>
        <python_environment>
          <command>cd /Users/bob/Documents/projects/x-unfollow-app && source venv/bin/activate</command>
          <verification>python -c "import app; print('✅ X Unfollow App ready')"</verification>
          <flask_check>Check Flask application loads without errors</flask_check>
        </python_environment>
        
        <project_health>
          <git_status>Check for uncommitted changes in project</git_status>
          <file_integrity>Verify key files (app.py, api.py, config.py) exist</file_integrity>
          <documentation_sync>Confirm docs are current and accessible</documentation_sync>
        </project_health>
      </environment_check>
      
      <priority_display>
        <immediate_tasks>
          <layer_2_implementation>Implement classify_unfollow_error() in app.py</layer_2_implementation>
          <integration_point>Add to slow_batch_worker() around line 450</integration_point>
          <testing_plan>Test with mixed error types, verify Layer 1 intact</testing_plan>
          <measurement>Quantify batch time improvement achieved</measurement>
        </immediate_tasks>
        
        <current_focus>
          <target_file>app.py</target_file>
          <target_function>slow_batch_worker()</target_function>
          <enhancement_goal>Smart wait times based on error classification</enhancement_goal>
          <success_metric>30-50% reduction in batch completion time</success_metric>
        </current_focus>
      </priority_display>
    </session_start_go>
    
    <session_end_consolidate>
      <x_unfollow_specific_tracking>
        <code_changes>
          <app_py_modifications>Track changes to main Flask application</app_py_modifications>
          <api_py_modifications>Track changes to X API client</api_py_modifications>
          <frontend_modifications>Track JavaScript and template changes</frontend_modifications>
          <config_modifications>Track configuration and environment changes</config_modifications>
        </code_changes>
        
        <layer_progress>
          <layer_status_update>Update .claude/context/layer-status.json with progress</layer_status_update>
          <function_inventory>Update technical/Current-Functions-Inventory.md if needed</function_inventory>
          <architecture_impact>Document any architectural changes or improvements</architecture_impact>
        </layer_progress>
        
        <testing_results>
          <layer_1_verification>Document that Layer 1 functionality remains intact</layer_1_verification>
          <layer_2_validation>Document Layer 2 error classification testing results</layer_2_validation>
          <performance_measurement>Record actual batch time improvements achieved</performance_measurement>
          <user_experience>Document any user-facing improvements or changes</user_experience>
        </testing_results>
      </x_unfollow_specific_tracking>
      
      <documentation_updates>
        <daily_technical_log>
          <file>docs/technical/daily-logs/YYYY-MM-DD-code-changes.md</file>
          <content>All code modifications with Flask/X API specific details</content>
          <format>Time, file, function, change, reasoning, testing</format>
        </daily_technical_log>
        
        <session_log_creation>
          <file>docs/progress/session-logs/YYYY-MM-DD-layer2-session.md</file>
          <content>Complete session record with X Unfollow App specific context</content>
          <includes>Objectives, accomplishments, technical decisions, learning notes</includes>
        </session_log_creation>
        
        <progress_tracking>
          <layer_status>Update layer completion percentages and milestones</layer_status>
          <project_health>Document overall project status and quality metrics</project_health>
          <next_priorities>Set clear priorities for next session</next_priorities>
        </progress_tracking>
      </documentation_updates>
    </session_end_consolidate>
  </session_management_protocols>
  
  <x_unfollow_development_standards>
    <code_quality_requirements>
      <flask_conventions>
        <routing>Follow RESTful API patterns for new endpoints</routing>
        <error_handling>Use Flask's error handling mechanisms</error_handling>
        <logging>Maintain visual logging with emoji indicators (✅ ❌ ⚠️ ℹ️)</logging>
        <session_management>Preserve OAuth 2.0 session handling</session_management>
      </flask_conventions>
      
      <x_api_compliance>
        <rate_limiting>Maintain 15-minute intervals for API compliance</rate_limiting>
        <authentication>Preserve OAuth 2.0 PKCE implementation</authentication>
        <error_handling>Handle X API specific error responses</error_handling>
        <token_management>Maintain secure token storage and refresh</token_management>
      </x_api_compliance>
      
      <javascript_frontend>
        <user_interface>Maintain Bootstrap styling and responsive design</user_interface>
        <real_time_updates>Preserve progress tracking and status updates</real_time_updates>
        <csv_management>Maintain CSV upload and user selection functionality</csv_management>
        <batch_operations>Preserve batch management and queue visualization</batch_operations>
      </javascript_frontend>
    </code_quality_requirements>
    
    <testing_protocols>
      <layer_verification>
        <layer_1_tests>
          <basic_batch>Test basic CSV upload and batch processing</basic_batch>
          <queue_management>Verify batch queue and sequential processing</queue_management>
          <authentication>Test OAuth login and token management</authentication>
          <cancellation>Verify batch cancellation functionality</cancellation>
        </layer_1_tests>
        
        <layer_2_tests>
          <error_classification>Test with known error types and messages</error_classification>
          <timing_verification>Confirm 5-second vs 15-minute wait times</timing_verification>
          <mixed_scenarios>Test batches with both free and expensive errors</mixed_scenarios>
          <performance_measurement>Measure actual time savings achieved</performance_measurement>
        </layer_2_tests>
      </layer_verification>
      
      <integration_testing>
        <x_api_integration>Test with real X API responses and rate limits</x_api_integration>
        <frontend_backend>Verify JavaScript frontend communicates correctly</frontend_backend>
        <session_persistence>Test OAuth session management across operations</session_persistence>
        <error_scenarios>Test various X API error conditions and responses</error_scenarios>
      </integration_testing>
    </testing_protocols>
  </x_unfollow_development_standards>
  
  <change_tracking_requirements>
    <mandatory_logging>
      <real_time_documentation>
        <requirement>Log ALL code changes immediately in daily technical log</requirement>
        <format>HH:MM - [app.py/api.py/script.js] - Function - Change - Reasoning - Testing</format>
        <x_api_context>Include X API specific context for authentication and rate limiting changes</x_api_context>
        <flask_context>Include Flask specific context for routing and session changes</flask_context>
      </real_time_documentation>
      
      <layer_specific_tracking>
        <layer_2_focus>Document all error classification implementation details</layer_2_focus>
        <foundation_preservation>Verify and document that Layer 1 remains intact</foundation_preservation>
        <performance_impact>Measure and document batch time improvements</performance_impact>
        <user_experience>Document any changes visible to end users</user_experience>
      </layer_specific_tracking>
    </mandatory_logging>
    
    <technical_decision_recording>
      <architecture_decisions>Document any changes to Flask app structure or X API integration</architecture_decisions>
      <error_handling_approach>Record reasoning for error classification logic and timing</error_handling_approach>
      <performance_optimization>Document approach to batch time reduction and measurement</performance_optimization>
      <compatibility_maintenance>Record how Layer 1 compatibility is preserved</compatibility_maintenance>
    </technical_decision_recording>
  </change_tracking_requirements>
  
  <session_success_metrics>
    <x_unfollow_specific_outcomes>
      <functionality_preserved>
        <authentication>OAuth 2.0 login and token management working</authentication>
        <batch_processing>CSV upload and user selection working</batch_processing>
        <queue_management>Batch queue and sequential processing working</queue_management>
        <progress_tracking>Real-time status updates and completion notifications working</progress_tracking>
      </functionality_preserved>
      
      <layer_2_achievements>
        <error_classification>Smart detection of error types implemented</error_classification>
        <timing_optimization>5-second waits for free errors, 15-minute for expensive</timing_optimization>
        <performance_improvement>Measurable reduction in batch completion time</performance_improvement>
        <user_benefit>Visible improvement in user experience</user_benefit>
      </layer_2_achievements>
      
      <quality_indicators>
        <no_regression>Zero impact to Layer 1 functionality</no_regression>
        <code_quality>Maintainable, readable, well-documented code</code_quality>
        <api_compliance>Maintained X API rate limit compliance</api_compliance>
        <documentation_complete>All changes fully documented with reasoning</documentation_complete>
      </quality_indicators>
    </x_unfollow_specific_outcomes>
  </session_success_metrics>
  
  <next_layer_preparation>
    <layer_3_readiness>
      <error_framework>Error classification system ready for retry logic enhancement</error_framework>
      <timing_system>Smart timing system ready for network resilience features</timing_system>
      <stable_foundation>Layer 1 + Layer 2 providing solid base for Layer 3</stable_foundation>
      <documentation_current>All documentation updated and ready for next enhancement</documentation_current>
    </layer_3_readiness>
  </next_layer_preparation>
</prompt>